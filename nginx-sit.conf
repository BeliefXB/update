
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    charset utf-8;
    server_tokens off;
    client_body_buffer_size 128k;
    #client_header_buffer_size 4096;
    #large_client_header_buffers 4 128k;
    client_header_buffer_size 256k;
    large_client_header_buffers 8 256k;
    client_header_timeout 15;
    client_body_timeout 15;
    #send_timeout 65;
	send_timeout 600s;
    client_max_body_size 1024m;
    open_file_cache max=65535 inactive=60s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 1;
    open_file_cache_errors on;
    server_names_hash_bucket_size 128;
  #  log_format main escape=json '"$remote_addr" "$remote_user-" "[$time_iso8601]" "$request_method"'
  #                  ' "$scheme" "$request_uri$request_body" "$server_protocol" "$status"'
  #                  ' "$body_bytes_sent" "$http_referer" "$http_user_agent" "$http_x_forwarded_for"'
  #                  ' "$upstream_addr" "$request_time" "$upstream_response_time" "$http_host"';
  #  access_log logs/access.log main;
  
	proxy_buffer_size 512k;
    proxy_buffers   8 512k;
    proxy_busy_buffers_size 512k;
    proxy_temp_file_write_size 512k;
    proxy_connect_timeout 600s;
    proxy_send_timeout 600s;
    proxy_read_timeout 600s;
    proxy_temp_path /opt/cache/temp;
    proxy_cache_path /opt/cache/data levels=1:2 keys_zone=cache_one:50m inactive=20m max_size=10g;
    add_header X-Frame-Options SAMEORIGIN;
	
    sendfile        on;
    autoindex       off;
    tcp_nopush      on;
    tcp_nodelay     on;
    #keepalive_timeout  65;
	keepalive_timeout 15s;
	
	fastcgi_connect_timeout 600s;
    fastcgi_send_timeout 600s;
    fastcgi_read_timeout 600s;
    fastcgi_buffer_size 512k;
    fastcgi_buffers 8 512k;
    fastcgi_busy_buffers_size 512k;
    fastcgi_temp_file_write_size 512k;
    fastcgi_intercept_errors on;
	
    types_hash_max_size 2048;
    reset_timedout_connection on;
    gzip on;
    gzip_min_length 1k;
    #gzip_buffers 16 64K;
	gzip_buffers 4 16k;
    gzip_http_version 1.1;
    #gzip_comp_level 6;
	gzip_comp_level 2;
    #gzip_types text/plain application/x-javascript text/css application/xml application/javascript;
	gzip_types text/plain application/x-javascript text/css application/xml;
    gzip_vary on;
    gzip_proxied any;
    underscores_in_headers on;
    proxy_ignore_client_abort on;
	
	map $http_upgrade $connection_upgrade {
		default upgrade;
		''     close;
	}	
	
	upstream ump_server {
		server 192.168.11.76:8080;
	}

	upstream ucc_server {
		server 192.168.11.76:9080;
	}

	upstream hswo_server {
		server 192.168.11.76:8081;
	}
	
	upstream relay_server {
		server 192.168.11.76:8686;
	}
	
	upstream kf-server {
		server 192.168.11.76:19090;
	}

    server {
		listen   6060;
		server_name   192.168.11.76;

		#charset koi8-r;

		#access_log  logs/host.access.log  main;

		location / {
			proxy_pass http://hswo_server/;
			#设置被代理服务器的端口或套接字，以及URL
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			#以上三行，目的是将代理服务器收到的用户的信息传到真实服务器上
		}

		location /kf-view {
			root /opt/knowledge-factory/kf-fronted;
			try_files $uri $uri/ /index.html;
			index index.html index.htm;
		}
		
		location ^~ /kfapi/ {
			proxy_pass http://kf-server/;
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			rewrite "^/kfapi/(.*)$" /$1 break;
        }
		
		location /group1/M00/{
			#root /opt/fastdfs/fdfs_storage/data;
			ngx_fastdfs_module;
		}

		#error_page  404              /404.html;

		# redirect server error pages to the static page /50x.html
		#
		error_page   500 502 503 504  /50x.html;
			location = /50x.html {
			root   html;
		}
			
		default_type   application/octet-stream;
	   
		location /ump/ {
			proxy_pass http://ump_server/ump/;
			#设置被代理服务器的端口或套接字，以及URL
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			#以上三行，目的是将代理服务器收到的用户的信息传到真实服务器上
		}

		location /umpSourceFile/ {
			proxy_pass http://ump_server/umpSourceFile/;
			#设置被代理服务器的端口或套接字，以及URL
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			#以上三行，目的是将代理服务器收到的用户的信息传到真实服务器上
		}

		location /any800/ {
			proxy_pass http://ucc_server/any800/;
			#设置被代理服务器的端口或套接字，以及URL
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header REMOTE-HOST $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			#以上三行，目的是将代理服务器收到的用户的信息传到真实服务器上
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "upgrade";
		}
		
		location /visitorSeparateMultilingual/ {
			proxy_pass http://ucc_server/visitorSeparateMultilingual/;
			#设置被代理服务器的端口或套接字，以及URL
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header REMOTE-HOST $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			#以上三行，目的是将代理服务器收到的用户的信息传到真实服务器上
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "upgrade";
		}

		location /chatClient/ {
			proxy_pass http://ucc_server/chatClient/;
			#设置被代理服务器的端口或套接字，以及URL
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header REMOTE-HOST $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			#以上三行，目的是将代理服务器收到的用户的信息传到真实服务器上
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "upgrade";
		}

		location /hswo/ {
			proxy_pass http://hswo_server/hswo/;
			#设置被代理服务器的端口或套接字，以及URL
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header REMOTE-HOST $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			#以上三行，目的是将代理服务器收到的用户的信息传到真实服务器上
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "upgrade";
			client_max_body_size 100m;    
		}
			
		location /form/ {
			proxy_pass http://hswo_server/form/;
			#设置被代理服务器的端口或套接字，以及URL
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			#以上三行，目的是将代理服务器收到的用户的信息传到真实服务器上
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "upgrade";
		}
			
		location /relay/ {
			proxy_pass http://relay_server/relay/;
			#设置被代理服务器的端口或套接字，以及URL
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			#以上三行，目的是将代理服务器收到的用户的信息传到真实服务器上
		}

		# proxy the PHP scripts to Apache listening on 127.0.0.1:80
		#
		#location ~ \.php$ {
		#    proxy_pass   http://127.0.0.1;
		#}

		# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
		#
		#location ~ \.php$ {
		#    root           html;
		#    fastcgi_pass   127.0.0.1:9000;
		#    fastcgi_index  index.php;
		#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
		#    include        fastcgi_params;
		#}

		# deny access to .htaccess files, if Apache's document root
		# concurs with nginx's one
		#
		#location ~ /\.ht {
		#    deny  all;
		#}
    }
}
